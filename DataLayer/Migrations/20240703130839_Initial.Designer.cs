// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(WolfDbContext))]
    [Migration("20240703130839_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataAccessLayer.Models.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityId"), 1L, 1);

                    b.Property<int>("ActivityTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpectedDuration")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParentActivityId")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.HasKey("ActivityId");

                    b.HasIndex("ActivityTypeID");

                    b.HasIndex("ParentActivityId");

                    b.HasIndex("RequestId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Activity_PlotRelashionship", b =>
                {
                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("PlotId")
                        .HasColumnType("int");

                    b.HasKey("ActivityId", "PlotId");

                    b.HasIndex("PlotId");

                    b.ToTable("Activity_PlotRelashionships");
                });

            modelBuilder.Entity("DataAccessLayer.Models.ActivityType", b =>
                {
                    b.Property<int>("ActivityTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityTypeID"), 1L, 1);

                    b.Property<string>("ActivityTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActivityTypeID");

                    b.ToTable("activityTypes");

                    b.HasData(
                        new
                        {
                            ActivityTypeID = 1,
                            ActivityTypeName = "Проект за изменение на КК"
                        },
                        new
                        {
                            ActivityTypeID = 2,
                            ActivityTypeName = "Комбинирана скица"
                        },
                        new
                        {
                            ActivityTypeID = 3,
                            ActivityTypeName = "Трасиране на имот"
                        },
                        new
                        {
                            ActivityTypeID = 4,
                            ActivityTypeName = "Заснемане по чл.54а ЗКИР"
                        },
                        new
                        {
                            ActivityTypeID = 5,
                            ActivityTypeName = "Изработване на ССО"
                        },
                        new
                        {
                            ActivityTypeID = 6,
                            ActivityTypeName = "Снимка за проектиране"
                        },
                        new
                        {
                            ActivityTypeID = 7,
                            ActivityTypeName = "Заснемане на обект /ограда, сграда/ за проверка"
                        },
                        new
                        {
                            ActivityTypeID = 8,
                            ActivityTypeName = "Заснемоне по чл.116 ЗУТ / линейни обекти/"
                        },
                        new
                        {
                            ActivityTypeID = 9,
                            ActivityTypeName = "Заснемане на обект чл.159 ЗУТ /за съответствие/"
                        },
                        new
                        {
                            ActivityTypeID = 10,
                            ActivityTypeName = "Издаване на скица"
                        },
                        new
                        {
                            ActivityTypeID = 11,
                            ActivityTypeName = "Издаване на удостоверение с характеристики на имота"
                        },
                        new
                        {
                            ActivityTypeID = 12,
                            ActivityTypeName = "Заснемане на обект § 16 ПР ЗУТ /за търпимост/"
                        },
                        new
                        {
                            ActivityTypeID = 13,
                            ActivityTypeName = "Заснемане на обект чрез фотограметрия"
                        },
                        new
                        {
                            ActivityTypeID = 14,
                            ActivityTypeName = "Архитектурно заснемане на обект"
                        },
                        new
                        {
                            ActivityTypeID = 15,
                            ActivityTypeName = "Трасиране на сграда"
                        },
                        new
                        {
                            ActivityTypeID = 16,
                            ActivityTypeName = "Трасиране на линеен обект"
                        },
                        new
                        {
                            ActivityTypeID = 17,
                            ActivityTypeName = "Част геодезия към инвестиционен проект"
                        },
                        new
                        {
                            ActivityTypeID = 18,
                            ActivityTypeName = "Схема за монтаж"
                        },
                        new
                        {
                            ActivityTypeID = 19,
                            ActivityTypeName = "Трасировъчен план за допълващо застрояване"
                        },
                        new
                        {
                            ActivityTypeID = 20,
                            ActivityTypeName = "Трасировъчен план за оград"
                        },
                        new
                        {
                            ActivityTypeID = 21,
                            ActivityTypeName = "Изменение на КРНИ"
                        },
                        new
                        {
                            ActivityTypeID = 22,
                            ActivityTypeName = "Изготвяне на  оферта за услуги"
                        },
                        new
                        {
                            ActivityTypeID = 23,
                            ActivityTypeName = "Подробен устройствен план"
                        },
                        new
                        {
                            ActivityTypeID = 24,
                            ActivityTypeName = "Процедура по промяна на предназначение или препотвърждаване на изтекло решение по чл.17 ЗОЗЗ на имот с влязъл в сила ПУП"
                        },
                        new
                        {
                            ActivityTypeID = 25,
                            ActivityTypeName = "Изменение на ПНИ"
                        },
                        new
                        {
                            ActivityTypeID = 26,
                            ActivityTypeName = "Изработване на протокол за максимален наклон"
                        },
                        new
                        {
                            ActivityTypeID = 27,
                            ActivityTypeName = "Протокол за съборена сграда"
                        },
                        new
                        {
                            ActivityTypeID = 28,
                            ActivityTypeName = "Трасировъчен план за линеен обект /ЕЛ, ВиК проводи/"
                        },
                        new
                        {
                            ActivityTypeID = 29,
                            ActivityTypeName = "Схема за монтаж на обекти в АПП на морски плажове"
                        },
                        new
                        {
                            ActivityTypeID = 30,
                            ActivityTypeName = "Програма за водно спасителна дейност"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientLegalType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Client_RequestRelashionship", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("OwnershipType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestId", "ClientId");

                    b.HasIndex("ClientId");

                    b.ToTable("Client_RequestRelashionships");
                });

            modelBuilder.Entity("DataAccessLayer.Models.DocumentOfOwnership", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"), 1L, 1);

                    b.Property<DateTime>("DateOfIssuing")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfRegistering")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocCase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Issuer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberOfDocument")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TOM")
                        .HasColumnType("int");

                    b.Property<string>("TypeOfDocument")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("register")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocumentId");

                    b.ToTable("DocumentsOfOwnership");
                });

            modelBuilder.Entity("DataAccessLayer.Models.DocumentOfOwnership_OwnerRelashionship", b =>
                {
                    b.Property<int>("DocumentOwnerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentOwnerID"), 1L, 1);

                    b.Property<int>("DocumentID")
                        .HasColumnType("int");

                    b.Property<int>("OwnerID")
                        .HasColumnType("int");

                    b.HasKey("DocumentOwnerID");

                    b.HasIndex("DocumentID");

                    b.HasIndex("OwnerID");

                    b.ToTable("DocumentOfOwnership_OwnerRelashionships");
                });

            modelBuilder.Entity("DataAccessLayer.Models.DocumentPlot_DocumentOwnerRelashionship", b =>
                {
                    b.Property<int>("DocumentPlotId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentOwnerID")
                        .HasColumnType("int");

                    b.Property<float>("IdealParts")
                        .HasColumnType("real");

                    b.Property<string>("WayOfAcquiring")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocumentPlotId", "DocumentOwnerID");

                    b.HasIndex("DocumentOwnerID");

                    b.ToTable("documentPlot_DocumentOwenerRelashionships");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"), 1L, 1);

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<float>("Sum")
                        .HasColumnType("real");

                    b.HasKey("InvoiceId");

                    b.HasIndex("RequestId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Owner", b =>
                {
                    b.Property<int>("OwnerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OwnerID"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EGN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OwnerID");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Plot", b =>
                {
                    b.Property<int>("PlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlotId"), 1L, 1);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Municipality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlotNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegulatedPlotNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StreetNumber")
                        .HasColumnType("int");

                    b.Property<string>("designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("locality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("neighborhood")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlotId");

                    b.ToTable("Plots");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Plot_DocumentOfOwnershipRelashionship", b =>
                {
                    b.Property<int>("DocumentPlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentPlotId"), 1L, 1);

                    b.Property<int>("DocumentOfOwnershipId")
                        .HasColumnType("int");

                    b.Property<int>("PlotId")
                        .HasColumnType("int");

                    b.HasKey("DocumentPlotId");

                    b.HasIndex("DocumentOfOwnershipId");

                    b.HasIndex("PlotId");

                    b.ToTable("Plot_DocumentOfOwnerships");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"), 1L, 1);

                    b.Property<float>("Advance")
                        .HasColumnType("real");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("RequestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("DataAccessLayer.Models.TaskType", b =>
                {
                    b.Property<int>("TaskTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskTypeId"), 1L, 1);

                    b.Property<int>("ActivityTypeID")
                        .HasColumnType("int");

                    b.Property<string>("TaskTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskTypeId");

                    b.HasIndex("ActivityTypeID");

                    b.ToTable("taskTypes");

                    b.HasData(
                        new
                        {
                            TaskTypeId = 1,
                            ActivityTypeID = 1,
                            TaskTypeName = "Трасиране правото на собственост"
                        },
                        new
                        {
                            TaskTypeId = 2,
                            ActivityTypeID = 1,
                            TaskTypeName = "Протокол за трасиране"
                        },
                        new
                        {
                            TaskTypeId = 3,
                            ActivityTypeID = 1,
                            TaskTypeName = "Заявка за cad файл от КК"
                        },
                        new
                        {
                            TaskTypeId = 4,
                            ActivityTypeID = 1,
                            TaskTypeName = "Заверка на протокол със копие от действащ ПУП в общинска администрация"
                        },
                        new
                        {
                            TaskTypeId = 5,
                            ActivityTypeID = 1,
                            TaskTypeName = "Комбинирана скица"
                        },
                        new
                        {
                            TaskTypeId = 6,
                            ActivityTypeID = 1,
                            TaskTypeName = "Изработване на проект за измение на КК"
                        },
                        new
                        {
                            TaskTypeId = 7,
                            ActivityTypeID = 1,
                            TaskTypeName = "Входиране на проекта в АГКК за приемане"
                        },
                        new
                        {
                            TaskTypeId = 8,
                            ActivityTypeID = 1,
                            TaskTypeName = "Протокол за приемане на проекта"
                        },
                        new
                        {
                            TaskTypeId = 9,
                            ActivityTypeID = 1,
                            TaskTypeName = "Издаване на скица след изменение "
                        },
                        new
                        {
                            TaskTypeId = 10,
                            ActivityTypeID = 1,
                            TaskTypeName = "предаване на клиент"
                        },
                        new
                        {
                            TaskTypeId = 11,
                            ActivityTypeID = 2,
                            TaskTypeName = "Заявка за cad файл от КК"
                        },
                        new
                        {
                            TaskTypeId = 12,
                            ActivityTypeID = 2,
                            TaskTypeName = "Заявление за копие от  необходими планове в общинска администрация"
                        },
                        new
                        {
                            TaskTypeId = 13,
                            ActivityTypeID = 2,
                            TaskTypeName = "Изработване на комбинирана скица "
                        },
                        new
                        {
                            TaskTypeId = 14,
                            ActivityTypeID = 2,
                            TaskTypeName = "Изпращане за съгласуване "
                        },
                        new
                        {
                            TaskTypeId = 15,
                            ActivityTypeID = 2,
                            TaskTypeName = "предаване на клиент"
                        },
                        new
                        {
                            TaskTypeId = 16,
                            ActivityTypeID = 3,
                            TaskTypeName = "анализ на документите"
                        },
                        new
                        {
                            TaskTypeId = 17,
                            ActivityTypeID = 3,
                            TaskTypeName = "трасиране "
                        },
                        new
                        {
                            TaskTypeId = 18,
                            ActivityTypeID = 3,
                            TaskTypeName = "Протокол за трасиране"
                        },
                        new
                        {
                            TaskTypeId = 19,
                            ActivityTypeID = 3,
                            TaskTypeName = "предаване на клиент"
                        },
                        new
                        {
                            TaskTypeId = 20,
                            ActivityTypeID = 4,
                            TaskTypeName = "анализ на документите"
                        },
                        new
                        {
                            TaskTypeId = 21,
                            ActivityTypeID = 4,
                            TaskTypeName = "геодезическо заснемане"
                        },
                        new
                        {
                            TaskTypeId = 22,
                            ActivityTypeID = 4,
                            TaskTypeName = "обработка на извършени измервания и изготвяне на проект за изменение на КК"
                        },
                        new
                        {
                            TaskTypeId = 23,
                            ActivityTypeID = 4,
                            TaskTypeName = "Входиране на проекта в АГКК за приемане"
                        },
                        new
                        {
                            TaskTypeId = 24,
                            ActivityTypeID = 4,
                            TaskTypeName = "Протокол за приемане на проекта"
                        },
                        new
                        {
                            TaskTypeId = 25,
                            ActivityTypeID = 4,
                            TaskTypeName = "предаване на клиент"
                        },
                        new
                        {
                            TaskTypeId = 26,
                            ActivityTypeID = 5,
                            TaskTypeName = "анализ на документите"
                        },
                        new
                        {
                            TaskTypeId = 27,
                            ActivityTypeID = 5,
                            TaskTypeName = "площообразуване"
                        },
                        new
                        {
                            TaskTypeId = 28,
                            ActivityTypeID = 5,
                            TaskTypeName = "изработване на проект за нанасяне на ССО"
                        },
                        new
                        {
                            TaskTypeId = 29,
                            ActivityTypeID = 5,
                            TaskTypeName = "Входиране на проекта в АГКК за приемане"
                        },
                        new
                        {
                            TaskTypeId = 30,
                            ActivityTypeID = 5,
                            TaskTypeName = "Протокол за приемане на проекта"
                        },
                        new
                        {
                            TaskTypeId = 31,
                            ActivityTypeID = 5,
                            TaskTypeName = "предаване на клиент"
                        },
                        new
                        {
                            TaskTypeId = 32,
                            ActivityTypeID = 6,
                            TaskTypeName = "анализ на документите"
                        },
                        new
                        {
                            TaskTypeId = 33,
                            ActivityTypeID = 6,
                            TaskTypeName = "геодезическо заснемане"
                        },
                        new
                        {
                            TaskTypeId = 34,
                            ActivityTypeID = 6,
                            TaskTypeName = "обработка на извършени измервания"
                        },
                        new
                        {
                            TaskTypeId = 35,
                            ActivityTypeID = 6,
                            TaskTypeName = "изпращане на водещия проектант на обекта"
                        },
                        new
                        {
                            TaskTypeId = 36,
                            ActivityTypeID = 7,
                            TaskTypeName = "анализ на документите"
                        },
                        new
                        {
                            TaskTypeId = 37,
                            ActivityTypeID = 7,
                            TaskTypeName = "геодезическо заснемане"
                        },
                        new
                        {
                            TaskTypeId = 38,
                            ActivityTypeID = 7,
                            TaskTypeName = "обработка на извършени измервания"
                        },
                        new
                        {
                            TaskTypeId = 39,
                            ActivityTypeID = 7,
                            TaskTypeName = "предаване на клиент на хартиен носител"
                        },
                        new
                        {
                            TaskTypeId = 40,
                            ActivityTypeID = 8,
                            TaskTypeName = "анализ на документите"
                        },
                        new
                        {
                            TaskTypeId = 41,
                            ActivityTypeID = 8,
                            TaskTypeName = "геодезическо заснемане"
                        },
                        new
                        {
                            TaskTypeId = 42,
                            ActivityTypeID = 8,
                            TaskTypeName = "обработка на извършени измервания"
                        },
                        new
                        {
                            TaskTypeId = 43,
                            ActivityTypeID = 8,
                            TaskTypeName = "Оформяне за предаване"
                        },
                        new
                        {
                            TaskTypeId = 44,
                            ActivityTypeID = 8,
                            TaskTypeName = "предаване "
                        },
                        new
                        {
                            TaskTypeId = 45,
                            ActivityTypeID = 9,
                            TaskTypeName = "анализ на документите"
                        },
                        new
                        {
                            TaskTypeId = 46,
                            ActivityTypeID = 9,
                            TaskTypeName = "геодезическо заснемане"
                        },
                        new
                        {
                            TaskTypeId = 47,
                            ActivityTypeID = 9,
                            TaskTypeName = "обработка на извършени измервания"
                        },
                        new
                        {
                            TaskTypeId = 48,
                            ActivityTypeID = 9,
                            TaskTypeName = "Оформяне за предаване"
                        },
                        new
                        {
                            TaskTypeId = 49,
                            ActivityTypeID = 10,
                            TaskTypeName = "анализ на документите"
                        },
                        new
                        {
                            TaskTypeId = 50,
                            ActivityTypeID = 10,
                            TaskTypeName = "входиране на заявление в КК"
                        },
                        new
                        {
                            TaskTypeId = 51,
                            ActivityTypeID = 10,
                            TaskTypeName = "предаване на клиент"
                        },
                        new
                        {
                            TaskTypeId = 52,
                            ActivityTypeID = 11,
                            TaskTypeName = "анализ на документите"
                        },
                        new
                        {
                            TaskTypeId = 53,
                            ActivityTypeID = 11,
                            TaskTypeName = "входиране на заявление в КК"
                        },
                        new
                        {
                            TaskTypeId = 54,
                            ActivityTypeID = 11,
                            TaskTypeName = "предаване на клиент"
                        },
                        new
                        {
                            TaskTypeId = 55,
                            ActivityTypeID = 12,
                            TaskTypeName = "анализ на документите"
                        },
                        new
                        {
                            TaskTypeId = 56,
                            ActivityTypeID = 12,
                            TaskTypeName = "геодезическо заснемане"
                        },
                        new
                        {
                            TaskTypeId = 57,
                            ActivityTypeID = 12,
                            TaskTypeName = "обработка на извършени измервания"
                        },
                        new
                        {
                            TaskTypeId = 58,
                            ActivityTypeID = 12,
                            TaskTypeName = "изпращане на водещия проектант на обекта"
                        },
                        new
                        {
                            TaskTypeId = 59,
                            ActivityTypeID = 12,
                            TaskTypeName = "Оформяне за предаване"
                        },
                        new
                        {
                            TaskTypeId = 60,
                            ActivityTypeID = 13,
                            TaskTypeName = "анализ на документите"
                        },
                        new
                        {
                            TaskTypeId = 61,
                            ActivityTypeID = 13,
                            TaskTypeName = "полски дейности"
                        },
                        new
                        {
                            TaskTypeId = 62,
                            ActivityTypeID = 13,
                            TaskTypeName = "обработка на извършени измервания"
                        },
                        new
                        {
                            TaskTypeId = 63,
                            ActivityTypeID = 13,
                            TaskTypeName = "изпратена за преглед и потвърждение"
                        },
                        new
                        {
                            TaskTypeId = 64,
                            ActivityTypeID = 13,
                            TaskTypeName = "предаване на клиент"
                        },
                        new
                        {
                            TaskTypeId = 65,
                            ActivityTypeID = 14,
                            TaskTypeName = "анализ на документите"
                        },
                        new
                        {
                            TaskTypeId = 66,
                            ActivityTypeID = 14,
                            TaskTypeName = "полски дейности"
                        },
                        new
                        {
                            TaskTypeId = 67,
                            ActivityTypeID = 14,
                            TaskTypeName = "канцеларска обработка"
                        },
                        new
                        {
                            TaskTypeId = 68,
                            ActivityTypeID = 14,
                            TaskTypeName = "предаване на клиент"
                        },
                        new
                        {
                            TaskTypeId = 69,
                            ActivityTypeID = 15,
                            TaskTypeName = "анализ на документите"
                        },
                        new
                        {
                            TaskTypeId = 70,
                            ActivityTypeID = 15,
                            TaskTypeName = "подготовка на данни"
                        },
                        new
                        {
                            TaskTypeId = 71,
                            ActivityTypeID = 15,
                            TaskTypeName = "полски дейности"
                        },
                        new
                        {
                            TaskTypeId = 72,
                            ActivityTypeID = 16,
                            TaskTypeName = "анализ на документите"
                        },
                        new
                        {
                            TaskTypeId = 73,
                            ActivityTypeID = 16,
                            TaskTypeName = "подготовка на данни"
                        },
                        new
                        {
                            TaskTypeId = 74,
                            ActivityTypeID = 16,
                            TaskTypeName = "полски дейности"
                        },
                        new
                        {
                            TaskTypeId = 75,
                            ActivityTypeID = 17,
                            TaskTypeName = "анализ на файлове от водещия проектант"
                        },
                        new
                        {
                            TaskTypeId = 76,
                            ActivityTypeID = 17,
                            TaskTypeName = "изработване на проект ВП и ТП"
                        },
                        new
                        {
                            TaskTypeId = 77,
                            ActivityTypeID = 17,
                            TaskTypeName = "изпращане на водещия проектант за съгласуване"
                        },
                        new
                        {
                            TaskTypeId = 78,
                            ActivityTypeID = 17,
                            TaskTypeName = "Оформяне за предаване"
                        },
                        new
                        {
                            TaskTypeId = 79,
                            ActivityTypeID = 17,
                            TaskTypeName = "предаване на клиент"
                        },
                        new
                        {
                            TaskTypeId = 80,
                            ActivityTypeID = 18,
                            TaskTypeName = "анализ на документите"
                        },
                        new
                        {
                            TaskTypeId = 81,
                            ActivityTypeID = 18,
                            TaskTypeName = "изработване на схема за монтаж"
                        },
                        new
                        {
                            TaskTypeId = 82,
                            ActivityTypeID = 18,
                            TaskTypeName = "предаване на клиент"
                        },
                        new
                        {
                            TaskTypeId = 83,
                            ActivityTypeID = 19,
                            TaskTypeName = "анализ на документите"
                        },
                        new
                        {
                            TaskTypeId = 84,
                            ActivityTypeID = 19,
                            TaskTypeName = "изработване на ТП"
                        },
                        new
                        {
                            TaskTypeId = 85,
                            ActivityTypeID = 19,
                            TaskTypeName = "предаване на клиент"
                        },
                        new
                        {
                            TaskTypeId = 86,
                            ActivityTypeID = 20,
                            TaskTypeName = "анализ на документите"
                        },
                        new
                        {
                            TaskTypeId = 87,
                            ActivityTypeID = 20,
                            TaskTypeName = "изработване на ТП"
                        },
                        new
                        {
                            TaskTypeId = 88,
                            ActivityTypeID = 20,
                            TaskTypeName = "предаване на клиент"
                        },
                        new
                        {
                            TaskTypeId = 89,
                            ActivityTypeID = 21,
                            TaskTypeName = "входиране на заявление в КК"
                        },
                        new
                        {
                            TaskTypeId = 90,
                            ActivityTypeID = 22,
                            TaskTypeName = "анализ на документите"
                        },
                        new
                        {
                            TaskTypeId = 91,
                            ActivityTypeID = 22,
                            TaskTypeName = "изготвяне на оферта"
                        },
                        new
                        {
                            TaskTypeId = 92,
                            ActivityTypeID = 22,
                            TaskTypeName = "изготвяне на графично предложение"
                        },
                        new
                        {
                            TaskTypeId = 93,
                            ActivityTypeID = 22,
                            TaskTypeName = "изпращане на клиента"
                        },
                        new
                        {
                            TaskTypeId = 94,
                            ActivityTypeID = 23,
                            TaskTypeName = "Скица на имота"
                        },
                        new
                        {
                            TaskTypeId = 95,
                            ActivityTypeID = 23,
                            TaskTypeName = "удостоверение с характеристика"
                        },
                        new
                        {
                            TaskTypeId = 96,
                            ActivityTypeID = 23,
                            TaskTypeName = "удостоверение за УЗ по ОУП"
                        },
                        new
                        {
                            TaskTypeId = 97,
                            ActivityTypeID = 23,
                            TaskTypeName = "Извадка от КК / ПР / ЗП"
                        },
                        new
                        {
                            TaskTypeId = 98,
                            ActivityTypeID = 23,
                            TaskTypeName = "изработване на задание за проектиране и графично предложение по чл.135 ЗУТ"
                        },
                        new
                        {
                            TaskTypeId = 99,
                            ActivityTypeID = 23,
                            TaskTypeName = "Проучване за присъединяване с ЕВН"
                        },
                        new
                        {
                            TaskTypeId = 100,
                            ActivityTypeID = 23,
                            TaskTypeName = "Проучване за присъединяване с ВиК"
                        },
                        new
                        {
                            TaskTypeId = 101,
                            ActivityTypeID = 23,
                            TaskTypeName = "Уведомление за план-програма до РИОСВ"
                        },
                        new
                        {
                            TaskTypeId = 102,
                            ActivityTypeID = 23,
                            TaskTypeName = "възлагане изработване на доклад за преценка от ЕО/ОВОС"
                        },
                        new
                        {
                            TaskTypeId = 103,
                            ActivityTypeID = 23,
                            TaskTypeName = "получаване на доклад и входиране в РИОСВ"
                        },
                        new
                        {
                            TaskTypeId = 104,
                            ActivityTypeID = 23,
                            TaskTypeName = "Получаване на решение за преценка от РИОСВ"
                        },
                        new
                        {
                            TaskTypeId = 105,
                            ActivityTypeID = 23,
                            TaskTypeName = "Писмо за влязло в сила решение на РИОСВ"
                        },
                        new
                        {
                            TaskTypeId = 106,
                            ActivityTypeID = 23,
                            TaskTypeName = "Съгласуване с НИНКН"
                        },
                        new
                        {
                            TaskTypeId = 107,
                            ActivityTypeID = 23,
                            TaskTypeName = "Входиране на искане за Допускане на ПУП"
                        },
                        new
                        {
                            TaskTypeId = 108,
                            ActivityTypeID = 23,
                            TaskTypeName = "Получаване на заповед за Допускане на ПУП"
                        },
                        new
                        {
                            TaskTypeId = 109,
                            ActivityTypeID = 23,
                            TaskTypeName = "Изработване на ПУП"
                        },
                        new
                        {
                            TaskTypeId = 110,
                            ActivityTypeID = 23,
                            TaskTypeName = "възлагане на план схема ВиК"
                        },
                        new
                        {
                            TaskTypeId = 111,
                            ActivityTypeID = 23,
                            TaskTypeName = "Получаване на план схема ВиК"
                        },
                        new
                        {
                            TaskTypeId = 112,
                            ActivityTypeID = 23,
                            TaskTypeName = "Съгласуване на план схема ВиК"
                        },
                        new
                        {
                            TaskTypeId = 113,
                            ActivityTypeID = 23,
                            TaskTypeName = "Възлагане на план схема ЕЛ"
                        },
                        new
                        {
                            TaskTypeId = 114,
                            ActivityTypeID = 23,
                            TaskTypeName = "Получаване на план схема ЕЛ"
                        },
                        new
                        {
                            TaskTypeId = 115,
                            ActivityTypeID = 23,
                            TaskTypeName = "Съгласуване на план схема ЕЛ"
                        },
                        new
                        {
                            TaskTypeId = 116,
                            ActivityTypeID = 23,
                            TaskTypeName = "Получаване на план схема озеленяване"
                        },
                        new
                        {
                            TaskTypeId = 117,
                            ActivityTypeID = 23,
                            TaskTypeName = "Изработване на ПУП"
                        },
                        new
                        {
                            TaskTypeId = 118,
                            ActivityTypeID = 23,
                            TaskTypeName = "Входиране на ПУП с план схеми за приемане на ОЕСУТ"
                        },
                        new
                        {
                            TaskTypeId = 119,
                            ActivityTypeID = 23,
                            TaskTypeName = "подписване на уведомление в общинска администрация"
                        },
                        new
                        {
                            TaskTypeId = 120,
                            ActivityTypeID = 23,
                            TaskTypeName = "Проект за съгласуване на ПУП с КК по чл.65 Наредба №РД-02-20-5-2016г."
                        },
                        new
                        {
                            TaskTypeId = 121,
                            ActivityTypeID = 23,
                            TaskTypeName = "Заповед за одобряване на ПУП"
                        },
                        new
                        {
                            TaskTypeId = 122,
                            ActivityTypeID = 23,
                            TaskTypeName = "подписване на уведомление в общинска администрация"
                        },
                        new
                        {
                            TaskTypeId = 123,
                            ActivityTypeID = 23,
                            TaskTypeName = "Получаване на преписката от общинска администрация"
                        },
                        new
                        {
                            TaskTypeId = 124,
                            ActivityTypeID = 23,
                            TaskTypeName = "Скица проект от АГКК"
                        },
                        new
                        {
                            TaskTypeId = 125,
                            ActivityTypeID = 23,
                            TaskTypeName = "Актуализация на проект в КК"
                        },
                        new
                        {
                            TaskTypeId = 126,
                            ActivityTypeID = 23,
                            TaskTypeName = "предаване на клиент"
                        },
                        new
                        {
                            TaskTypeId = 127,
                            ActivityTypeID = 24,
                            TaskTypeName = "анализ на документите"
                        },
                        new
                        {
                            TaskTypeId = 128,
                            ActivityTypeID = 24,
                            TaskTypeName = "Скица на имота"
                        },
                        new
                        {
                            TaskTypeId = 129,
                            ActivityTypeID = 24,
                            TaskTypeName = "удостоверение с характеристика"
                        },
                        new
                        {
                            TaskTypeId = 130,
                            ActivityTypeID = 24,
                            TaskTypeName = "удостоверение за УЗ по ОУП"
                        },
                        new
                        {
                            TaskTypeId = 131,
                            ActivityTypeID = 24,
                            TaskTypeName = "инвестиционно намерение до РИОСВ"
                        },
                        new
                        {
                            TaskTypeId = 132,
                            ActivityTypeID = 24,
                            TaskTypeName = "Удостоверение за поливност"
                        },
                        new
                        {
                            TaskTypeId = 133,
                            ActivityTypeID = 24,
                            TaskTypeName = "Акт за категоризация"
                        },
                        new
                        {
                            TaskTypeId = 134,
                            ActivityTypeID = 24,
                            TaskTypeName = "Съгласеване с НИНКН"
                        },
                        new
                        {
                            TaskTypeId = 135,
                            ActivityTypeID = 24,
                            TaskTypeName = "Изработване и съгласуване на план-схема Вик при необходимост"
                        },
                        new
                        {
                            TaskTypeId = 136,
                            ActivityTypeID = 24,
                            TaskTypeName = "Здравно заключение от РЗИ"
                        },
                        new
                        {
                            TaskTypeId = 137,
                            ActivityTypeID = 24,
                            TaskTypeName = "Входиране на преписката в комисията по чл.17 ЗОЗЗ"
                        },
                        new
                        {
                            TaskTypeId = 138,
                            ActivityTypeID = 24,
                            TaskTypeName = "Решение на комия по чл.17 ЗОЗЗ"
                        },
                        new
                        {
                            TaskTypeId = 139,
                            ActivityTypeID = 24,
                            TaskTypeName = "заплащане на определената такса"
                        },
                        new
                        {
                            TaskTypeId = 140,
                            ActivityTypeID = 24,
                            TaskTypeName = "получаване на преписката от ОДЗ"
                        },
                        new
                        {
                            TaskTypeId = 141,
                            ActivityTypeID = 24,
                            TaskTypeName = "предаване на клиент"
                        },
                        new
                        {
                            TaskTypeId = 142,
                            ActivityTypeID = 25,
                            TaskTypeName = "анализ на документите"
                        },
                        new
                        {
                            TaskTypeId = 143,
                            ActivityTypeID = 25,
                            TaskTypeName = "получаване на изходна информация от общинска администрация /модел и поредни номера/"
                        },
                        new
                        {
                            TaskTypeId = 144,
                            ActivityTypeID = 25,
                            TaskTypeName = "изработване на проект за измение на ПНИ"
                        },
                        new
                        {
                            TaskTypeId = 145,
                            ActivityTypeID = 25,
                            TaskTypeName = "предаване на клиент"
                        },
                        new
                        {
                            TaskTypeId = 146,
                            ActivityTypeID = 26,
                            TaskTypeName = "изработване на протокол"
                        },
                        new
                        {
                            TaskTypeId = 147,
                            ActivityTypeID = 26,
                            TaskTypeName = "предаване на клиент"
                        },
                        new
                        {
                            TaskTypeId = 148,
                            ActivityTypeID = 27,
                            TaskTypeName = "анализ на документите"
                        },
                        new
                        {
                            TaskTypeId = 149,
                            ActivityTypeID = 27,
                            TaskTypeName = "проверка на терен"
                        },
                        new
                        {
                            TaskTypeId = 150,
                            ActivityTypeID = 27,
                            TaskTypeName = "изготвяне на протокол"
                        },
                        new
                        {
                            TaskTypeId = 151,
                            ActivityTypeID = 27,
                            TaskTypeName = "предаване на клиент"
                        },
                        new
                        {
                            TaskTypeId = 152,
                            ActivityTypeID = 28,
                            TaskTypeName = "анализ на документите и файлове от водещ проектант"
                        },
                        new
                        {
                            TaskTypeId = 153,
                            ActivityTypeID = 28,
                            TaskTypeName = "Изработванен на ТП"
                        },
                        new
                        {
                            TaskTypeId = 154,
                            ActivityTypeID = 28,
                            TaskTypeName = "Оформяне за предаване"
                        },
                        new
                        {
                            TaskTypeId = 155,
                            ActivityTypeID = 28,
                            TaskTypeName = "предаване на клиент"
                        },
                        new
                        {
                            TaskTypeId = 156,
                            ActivityTypeID = 29,
                            TaskTypeName = "анализ на документите"
                        },
                        new
                        {
                            TaskTypeId = 157,
                            ActivityTypeID = 29,
                            TaskTypeName = "изработване на схема за монтаж"
                        },
                        new
                        {
                            TaskTypeId = 158,
                            ActivityTypeID = 29,
                            TaskTypeName = "съгласуване с възложител"
                        },
                        new
                        {
                            TaskTypeId = 159,
                            ActivityTypeID = 29,
                            TaskTypeName = "Оформяне за предаване"
                        },
                        new
                        {
                            TaskTypeId = 160,
                            ActivityTypeID = 29,
                            TaskTypeName = "предаване на клиент"
                        },
                        new
                        {
                            TaskTypeId = 161,
                            ActivityTypeID = 30,
                            TaskTypeName = "анализ на документите"
                        },
                        new
                        {
                            TaskTypeId = 162,
                            ActivityTypeID = 30,
                            TaskTypeName = "изработване на протграмата"
                        },
                        new
                        {
                            TaskTypeId = 163,
                            ActivityTypeID = 30,
                            TaskTypeName = "съгласуване с възложител"
                        },
                        new
                        {
                            TaskTypeId = 164,
                            ActivityTypeID = 30,
                            TaskTypeName = "Оформяне за предаване"
                        },
                        new
                        {
                            TaskTypeId = 165,
                            ActivityTypeID = 30,
                            TaskTypeName = "предаване на клиент"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Models.WorkTask", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"), 1L, 1);

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ControlId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<int>("ExecutantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TaskTypeId")
                        .HasColumnType("int");

                    b.HasKey("TaskId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ControlId");

                    b.HasIndex("ExecutantId");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "1",
                            Name = "admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "2",
                            Name = "user",
                            NormalizedName = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.Activity", b =>
                {
                    b.HasOne("DataAccessLayer.Models.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.Activity", "ParentActivity")
                        .WithMany()
                        .HasForeignKey("ParentActivityId");

                    b.HasOne("DataAccessLayer.Models.Request", "Request")
                        .WithMany("Activities")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ActivityType");

                    b.Navigation("ParentActivity");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Activity_PlotRelashionship", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Activity", "Activity")
                        .WithMany("ActivityPlots")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.Plot", "Plot")
                        .WithMany("ActivityPlots")
                        .HasForeignKey("PlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Plot");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Client_RequestRelashionship", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Client", "Client")
                        .WithMany("Client_RequestRelationships")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.Request", "Request")
                        .WithMany("Client_RequestRelationships")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DataAccessLayer.Models.DocumentOfOwnership_OwnerRelashionship", b =>
                {
                    b.HasOne("DataAccessLayer.Models.DocumentOfOwnership", "Document")
                        .WithMany("DocumentOwners")
                        .HasForeignKey("DocumentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.Owner", "Owner")
                        .WithMany("documentOfOwnership_OwnerRelashionships")
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DataAccessLayer.Models.DocumentPlot_DocumentOwnerRelashionship", b =>
                {
                    b.HasOne("DataAccessLayer.Models.DocumentOfOwnership_OwnerRelashionship", "DocumentOwner")
                        .WithMany("documentPlot_DocumentOwnerRelashionships")
                        .HasForeignKey("DocumentOwnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.Plot_DocumentOfOwnershipRelashionship", "DocumentPlot")
                        .WithMany("documentPlot_DocumentOwnerRelashionships")
                        .HasForeignKey("DocumentPlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentOwner");

                    b.Navigation("DocumentPlot");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Invoice", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Request", "Request")
                        .WithMany("Invoices")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Plot_DocumentOfOwnershipRelashionship", b =>
                {
                    b.HasOne("DataAccessLayer.Models.DocumentOfOwnership", "documentOfOwnership")
                        .WithMany("PlotsDocuments")
                        .HasForeignKey("DocumentOfOwnershipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.Plot", "Plot")
                        .WithMany("PlotDocuments")
                        .HasForeignKey("PlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plot");

                    b.Navigation("documentOfOwnership");
                });

            modelBuilder.Entity("DataAccessLayer.Models.TaskType", b =>
                {
                    b.HasOne("DataAccessLayer.Models.ActivityType", "Activity")
                        .WithMany("TaskTypes")
                        .HasForeignKey("ActivityTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("DataAccessLayer.Models.WorkTask", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Activity", "Activity")
                        .WithMany("Tasks")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.Employee", "Control")
                        .WithMany()
                        .HasForeignKey("ControlId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccessLayer.Models.Employee", "Executant")
                        .WithMany()
                        .HasForeignKey("ExecutantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.TaskType", "taskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Control");

                    b.Navigation("Executant");

                    b.Navigation("taskType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Models.Activity", b =>
                {
                    b.Navigation("ActivityPlots");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("DataAccessLayer.Models.ActivityType", b =>
                {
                    b.Navigation("TaskTypes");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Client", b =>
                {
                    b.Navigation("Client_RequestRelationships");
                });

            modelBuilder.Entity("DataAccessLayer.Models.DocumentOfOwnership", b =>
                {
                    b.Navigation("DocumentOwners");

                    b.Navigation("PlotsDocuments");
                });

            modelBuilder.Entity("DataAccessLayer.Models.DocumentOfOwnership_OwnerRelashionship", b =>
                {
                    b.Navigation("documentPlot_DocumentOwnerRelashionships");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Owner", b =>
                {
                    b.Navigation("documentOfOwnership_OwnerRelashionships");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Plot", b =>
                {
                    b.Navigation("ActivityPlots");

                    b.Navigation("PlotDocuments");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Plot_DocumentOfOwnershipRelashionship", b =>
                {
                    b.Navigation("documentPlot_DocumentOwnerRelashionships");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Request", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Client_RequestRelationships");

                    b.Navigation("Invoices");
                });
#pragma warning restore 612, 618
        }
    }
}
