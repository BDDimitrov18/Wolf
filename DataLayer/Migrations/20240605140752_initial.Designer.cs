// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(WolfDbContext))]
    [Migration("20240605140752_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataAccessLayer.Models.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityId"), 1L, 1);

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("ExpectedDuration")
                        .HasColumnType("time");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("WorkObjectId")
                        .HasColumnType("int");

                    b.HasKey("ActivityId");

                    b.HasIndex("RequestId");

                    b.HasIndex("WorkObjectId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientLegalType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Client_RequestRelashionship", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("OwnershipType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestId", "ClientId");

                    b.HasIndex("ClientId");

                    b.ToTable("Client_RequestRelashionships");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Employee_WorkObjectRelashionship", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("WorkObjectId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId", "WorkObjectId");

                    b.HasIndex("WorkObjectId");

                    b.ToTable("Employee_WorkObjectRelashionships");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"), 1L, 1);

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<float>("Sum")
                        .HasColumnType("real");

                    b.HasKey("InvoiceId");

                    b.HasIndex("RequestId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Plot", b =>
                {
                    b.Property<int>("PlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlotId"), 1L, 1);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Municipality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlotNumber")
                        .HasColumnType("int");

                    b.Property<int?>("RegulatedPlotNumber")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StreetNumber")
                        .HasColumnType("int");

                    b.Property<string>("designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("locality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("neighborhood")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlotId");

                    b.ToTable("Plots");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"), 1L, 1);

                    b.Property<float>("Advance")
                        .HasColumnType("real");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("RequestId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Request_WorkObjectRelashionship", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("WorkObjectId")
                        .HasColumnType("int");

                    b.HasKey("RequestId", "WorkObjectId");

                    b.HasIndex("WorkObjectId");

                    b.ToTable("Request_WorkObjectRelashionships");
                });

            modelBuilder.Entity("DataAccessLayer.Models.WorkObject", b =>
                {
                    b.Property<int>("WorkObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkObjectId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("WorkObjectId");

                    b.ToTable("WorkObjects");
                });

            modelBuilder.Entity("DataAccessLayer.Models.WorkObject_PlotRelashionship", b =>
                {
                    b.Property<int>("WorkObjectId")
                        .HasColumnType("int");

                    b.Property<int>("PlotId")
                        .HasColumnType("int");

                    b.HasKey("WorkObjectId", "PlotId");

                    b.HasIndex("PlotId");

                    b.ToTable("Object_PlotRelashionships");
                });

            modelBuilder.Entity("DataAccessLayer.Models.WorkTask", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"), 1L, 1);

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ControlId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<int>("ExecutantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ControlId");

                    b.HasIndex("ExecutantId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Activity", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Request", "Request")
                        .WithMany("Activities")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.WorkObject", "WorkObject")
                        .WithMany("Activities")
                        .HasForeignKey("WorkObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("WorkObject");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Client_RequestRelashionship", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Client", "Client")
                        .WithMany("Client_RequestRelationships")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.Request", "Request")
                        .WithMany("Client_RequestRelationships")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Employee_WorkObjectRelashionship", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Employee", "Employee")
                        .WithMany("Employee_WorkObjectRelationships")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.WorkObject", "WorkObject")
                        .WithMany("Employee_WorkObjectRelationships")
                        .HasForeignKey("WorkObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("WorkObject");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Invoice", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Request", "Request")
                        .WithMany("Invoices")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Request_WorkObjectRelashionship", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Request", "Request")
                        .WithMany("Request_WorkObjectRelationships")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.WorkObject", "WorkObject")
                        .WithMany("Request_WorkObjectRelationships")
                        .HasForeignKey("WorkObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("WorkObject");
                });

            modelBuilder.Entity("DataAccessLayer.Models.WorkObject_PlotRelashionship", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Plot", "Plot")
                        .WithMany("WorkObject_PlotRelationships")
                        .HasForeignKey("PlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.WorkObject", "WorkObject")
                        .WithMany("WorkObject_PlotRelationships")
                        .HasForeignKey("WorkObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plot");

                    b.Navigation("WorkObject");
                });

            modelBuilder.Entity("DataAccessLayer.Models.WorkTask", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.Employee", "Control")
                        .WithMany()
                        .HasForeignKey("ControlId");

                    b.HasOne("DataAccessLayer.Models.Employee", "Executant")
                        .WithMany()
                        .HasForeignKey("ExecutantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Control");

                    b.Navigation("Executant");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Client", b =>
                {
                    b.Navigation("Client_RequestRelationships");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Employee", b =>
                {
                    b.Navigation("Employee_WorkObjectRelationships");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Plot", b =>
                {
                    b.Navigation("WorkObject_PlotRelationships");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Request", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Client_RequestRelationships");

                    b.Navigation("Invoices");

                    b.Navigation("Request_WorkObjectRelationships");
                });

            modelBuilder.Entity("DataAccessLayer.Models.WorkObject", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Employee_WorkObjectRelationships");

                    b.Navigation("Request_WorkObjectRelationships");

                    b.Navigation("WorkObject_PlotRelationships");
                });
#pragma warning restore 612, 618
        }
    }
}
